---

- name: Hostname -> EXCHANGE
  win_hostname:
    name: EXCHANGE
  register: res

- name: Reboot
  win_reboot:
  when: res.reboot_required

#- name: Set HostOnly IP Address
#  win_shell: "If (-not(get-netipaddress | where {$_.IPAddress -eq '192.168.38.106'})) {$adapter = (get-netadapter | where {$_.MacAddress -eq '00-50-56-A1-B4-C5'}).Name; New-NetIPAddress –InterfaceAlias $adapter –AddressFamily IPv4 -IPAddress 192.168.38.106 –PrefixLength 24 -DefaultGateway 192.168.38.1 } Else { Write-Host 'IP Address Already Created.' }"

#- name: Set HostOnly DNS Address
#  win_shell: "$adapter = (get-netadapter | where {$_.MacAddress -eq '00-50-56-A1-B4-C5'}).Name; Set-DnsClientServerAddress -InterfaceAlias $adapter -ServerAddresses 192.168.38.102,8.8.8.8"

- name: Install git
  win_chocolatey:
    name: git
    state: present

- name: Check if existing DetectionLab directory
  win_stat:
    path: 'c:\DetectionLab'
  register: dir

- name: Git clone Detectionlab
  win_shell: git clone https://github.com/clong/DetectionLab.git
  args:
    chdir: 'c:\'
  when: not dir.stat.exists

- name: Check if existing Vagrant directory
  win_stat:
    path: 'c:\vagrant'
  register: vag

- name: Copy scripts to c:\vagrant
  win_shell: Copy-Item -Recurse c:\DetectionLab\Vagrant c:\vagrant
  when: not vag.stat.exists
  
#changes to make larger personal domian
- name: fixing hardcoded IPs for personal domain ip schema (provision.ps1)
  win_shell: (Get-Content "c:\vagrant\scripts\provision.ps1").replace('192.168.56.102','10.0.2.2') | Set-Content -Path "c:\vagrant\scripts\provision.ps1"
  when: not vag.stat.exists
- name: fixing hardcoded IPs for personal domain ip schema (join-domain.ps1)
  win_shell: (Get-Content "c:\vagrant\scripts\join-domain.ps1").replace('192.168.56.102','10.0.2.2') | Set-Content -Path "c:\vagrant\scripts\join-domain.ps1"
  when: not vag.stat.exists
- name: fixing hardcoded IPs for personal domain ip schema (join-domain.ps1)
  win_shell: (Get-Content "c:\vagrant\scripts\join-domain.ps1").replace('192.168.56.','10.0.2.2') | Set-Content -Path "c:\vagrant\scripts\join-domain.ps1"
  when: not vag.stat.exists
- name: changing win10 to win10-* for more boxes (join-domain.ps1)
  win_shell: (Get-Content "c:\vagrant\scripts\join-domain.ps1").replace('-eq "win10"','-like "win10*"') | Set-Content -Path "c:\vagrant\scripts\join-domain.ps1"
  when: not vag.stat.exists
- name: changing windomain.local to windomain to join domain correctly (join-domain.ps1)
  win_shell: (Get-Content "c:\vagrant\scripts\join-domain.ps1").replace('windomain.local','windomain') | Set-Content -Path "c:\vagrant\scripts\join-domain.ps1"
  when: not vag.stat.exists

- name: Join the Domain
  win_shell: .\\provision.ps1
  args:
    chdir: 'c:\vagrant\scripts'
  register: exchange_join_domain
  changed_when: "'HasSucceeded : True' in exchange_join_domain.stdout"

- debug: msg="{{ exchange_join_domain.stdout_lines }}"

- name: Reboot After Joining the Domain
  win_reboot:
    msg: "Joining the domain. Rebooting..."
    pre_reboot_delay: 5
    reboot_timeout: 600
    post_reboot_delay: 60

- name: Install Exchange Prereqs
  win_shell: .\\install-exchange-prerequisites.ps1
  args:
    chdir: 'c:\vagrant\scripts'
  register: exchange_prereqs
  changed_when: "'A reboot is required to continue installation of exchange.' in exchange_prereqs.stdout"

- name: Reboot After Installing Exchange PreReqs
  win_reboot:
    msg: "Exchange Prereqs installed. Rebooting..."
    pre_reboot_delay: 5
    reboot_timeout: 600
    post_reboot_delay: 60

- name: Make Exchange Directory
  win_file:
    path: 'C:\exchange2016'
    state: directory

- name: Download ISO
  win_get_url:
    url: 'https://download.microsoft.com/download/2/5/8/258D30CF-CA4C-433A-A618-FB7E6BCC4EEE/ExchangeServer2016-x64-cu12.iso'
    dest: 'C:\exchange2016\ExchangeServer2016-x64-cu12.iso'

- name: Ensure an ISO is mounted
  win_disk_image:
    image_path: 'C:\exchange2016\ExchangeServer2016-x64-cu12.iso'
    state: present
  register: disk_image_out

- name: Prepare Schema
  win_package:
    path: '{{ disk_image_out.mount_paths[0] }}Setup.exe'
    arguments: >-
      /IAcceptExchangeServerLicenseTerms
      /PrepareSchema
    product_id: '{CD981244-E9B8-405A-9026-6AEB9DCEF1F1}'
  vars:
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: WINDOMAIN.local\Administrator
    ansible_become_password: vagrant
  register: prepare_schema

- name: Prepare AD
  win_package:
    path: '{{ disk_image_out.mount_paths[0] }}Setup.exe'
    arguments: >-
      /IAcceptExchangeServerLicenseTerms
      /PrepareAD
      /OrganizationName: DetectionLab
    product_id: '{CD981244-E9B8-405A-9026-6AEB9DCEF1F1}'
  vars:
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: WINDOMAIN.local\Administrator
    ansible_become_password: vagrant
  register: prepare_ad

- name: Install Exchange
  win_package:
    path: '{{ disk_image_out.mount_paths[0] }}Setup.exe'
    arguments: >-
      /IAcceptExchangeServerLicenseTerms
      /Mode:Install
      /Role:Mailbox
    product_id: '{CD981244-E9B8-405A-9026-6AEB9DCEF1F1}'
  vars:
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: WINDOMAIN.local\Administrator
    ansible_become_password: vagrant
  register: install_exchange

- name: Reboot after Exchange Installation
  win_reboot:
    msg: "Exchange installed. Rebooting..."
    pre_reboot_delay: 5
    reboot_timeout: 600
    post_reboot_delay: 60

- name: Clear Event Logs
  win_shell: "wevtutil el | Select-String -notmatch \"Microsoft-Windows-LiveId\" | Foreach-Object {wevtutil cl \"$_\"}"


