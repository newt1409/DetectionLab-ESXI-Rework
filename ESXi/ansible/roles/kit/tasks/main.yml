---

- name: Set hostname to logger
  hostname:
    name: kit
  become: yes

- name: Create a directory if it does not exist
  file:
    path: /vagrant
    state: directory
    mode: '0755'
  become: yes

- name: Copy vagrant resources
  synchronize:
    src: ../../Vagrant/resources
    dest: /vagrant/
  become: yes

- name: Copy bootstrap file
  copy:
    src: ../../Vagrant/logger_bootstrap.sh
    dest: /home/vagrant
    owner: vagrant
    group: vagrant
    mode: u+x,g+x

- name: Copy netplan file
  copy:
    src: ../resources/01-netcfg.yaml
    dest: /tmp
    owner: vagrant
    group: vagrant

- name: Copy the netplan file over as root
  shell: "mv /tmp/01-netcfg.yaml /etc/netplan/01-netcfg.yaml"
  become: yes

- name: Apply the new netplan
  shell: netplan apply
  become: yes

#- name: Add APT Repositories
#  apt_repository:
#    repo: "{{ item }}"
#  with_items:
#    - "ppa:apt-fast/stable"
#    - "ppa:rmescandon/yq"
#    - "ppa:oisf/suricata-stable"
#  become: yes

- name: Install apt-fast
  become: yes
  apt:
    name: apt-fast
    update_cache: yes

- name: Install tools via apt-fast
  args: 
    executable: /bin/bash
  become: yes
  shell: |
      echo "[$(date +%H:%M:%S)]: Running apt-fast install..."
      apt-fast -qq install -y jq whois build-essential git mysql-server redis-server python3-pip unzip htop yq libcairo2-dev libjpeg-turbo8-dev libpng-dev libtool-bin libossp-uuid-dev libavcodec-dev libavutil-dev libswscale-dev freerdp2-dev libpango1.0-dev libssh2-1-dev libvncserver-dev libtelnet-dev libssl-dev libvorbis-dev libwebp-dev tomcat9 tomcat9-admin tomcat9-user tomcat9-common ca-certificates curl gnupg lsb-release docker-ce docker-ce-clie containerd.io docker-compose
  register: apt_install_prerequisites
  failed_when: "'error' in apt_install_prerequisites.stderr"

- name: Update the MOTD
  args: 
    executable: /bin/bash
  become: yes
  shell: |
    echo "[$(date +%H:%M:%S)]: Updating the MOTD..."
    # Force color terminal
    sed -i 's/#force_color_prompt=yes/force_color_prompt=yes/g' /root/.bashrc
    sed -i 's/#force_color_prompt=yes/force_color_prompt=yes/g' /home/vagrant/.bashrc
    # Remove some stock Ubuntu MOTD content
    chmod -x /etc/update-motd.d/10-help-text
    # Copy the DetectionLab MOTD
    cp /vagrant/resources/logger/20-detectionlab /etc/update-motd.d/
    chmod +x /etc/update-motd.d/20-detectionlab
  register: modify_motd
  failed_when: "'error' in modify_motd.stderr"

- name: Test Prerequisites
  args: 
    executable: /bin/bash
  become: yes
  shell: |
    for package in jq whois build-essential git unzip yq mysql-server redis-server python3-pip docker docker-compose; do
      echo "[$(date +%H:%M:%S)]: [TEST] Validating that $package is correctly installed..."
      # Loop through each package using dpkg
      if ! dpkg -S $package >/dev/null; then
        # If which returns a non-zero return code, try to re-install the package
        echo "[-] $package was not found. Attempting to reinstall."
        apt-get -qq update && apt-get install -y $package
        if ! which $package >/dev/null; then
          # If the reinstall fails, give up
          echo "[X] Unable to install $package even after a retry. Exiting."
          exit 1
        fi
      else
        echo "[+] $package was successfully installed!"
      fi
    done
  register: test_prerequisites
  failed_when: "'error' in test_prerequisites.stderr"

- name: Fix Static IPs
  args: 
    executable: /bin/bash
  become: yes
  shell: |
    USING_KVM=$(sudo lsmod | grep kvm)
    if [ ! -z "$USING_KVM" ]; then
      echo "[*] Using KVM, no need to fix DHCP for eth1 iface"
      exit 0 
    fi
    if [ -f /sys/class/net/eth2/address ]; then
      if [ "$(cat /sys/class/net/eth2/address)" == "00:50:56:a3:b1:c4" ]; then
        echo "[*] Using ESXi, no need to change anything"
        exit 0
      fi
    fi
    # There's a fun issue where dhclient keeps messing with eth1 despite the fact
    # that eth1 has a static IP set. We workaround this by setting a static DHCP lease.
    if ! grep 'interface "eth1"' /etc/dhcp/dhclient.conf; then
    echo -e 'interface "eth1" {
      send host-name = gethostname();
      send dhcp-requested-address 192.168.56.105;
    }' >>/etc/dhcp/dhclient.conf
    netplan apply
    fi
    # Fix eth1 if the IP isn't set correctly
    ETH1_IP=$(ip -4 addr show eth1 | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
    if [ "$ETH1_IP" != "192.168.56.105" ]; then
      echo "Incorrect IP Address settings detected. Attempting to fix."
      ifdown eth1
      ip addr flush dev eth1
      ifup eth1
      ETH1_IP=$(ifconfig eth1 | grep 'inet addr' | cut -d ':' -f 2 | cut -d ' ' -f 1)
      if [ "$ETH1_IP" == "192.168.56.105" ]; then
        echo "[$(date +%H:%M:%S)]: The static IP has been fixed and set to 192.168.56.105"
      else
        echo "[$(date +%H:%M:%S)]: Failed to fix the broken static IP for eth1. Exiting because this will cause problems with other VMs."
        exit 1
      fi
    fi

    # Make sure we do have a DNS resolution
    while true; do
      if [ "$(dig +short @8.8.8.8 github.com)" ]; then break; fi
      sleep 1
    done
  register: fix_eth1_static_ip
  failed_when: "'error' in fix_eth1_static_ip.stderr"
  changed_when: "'Using ESXi' in fix_eth1_static_ip.stdout"

- name: Install Elastic and Fleet
  args: 
    executable: /bin/bash
  become: yes
  environment:
    MAXMIND_LICENSE: ""
    BASE64_ENCODED_SPLUNK_LICENSE: ""
  shell: |
    cd /home/vagrant/
    mkdir docker
    cd docker
    git clone https://github.com/newt1409/Elastic-and-Fleet
    cd Elastic-and-Fleet
    docker-compose up -d
    docker-compose down
    docker-compose up -d
  register: install_elastic-and-fleet
  #changed_when: "'The Splunk web interface is at https://logger:8000' in install_splunk.stdout"

- name: Install Arkime and Suricata
