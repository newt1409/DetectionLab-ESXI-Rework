---

- name: Hostname -> WEF
  win_hostname:
    name: wef
  register: res

- name: Reboot
  win_reboot:
  when: res.reboot_required


#- name: Restart Net Adapter for DHCP
#  win_shell: "$adapter = (get-netadapter).name; restart-netadapter $adapter"

# This needs to be made idempodent
#- name: Set HostOnly IP Address
#  win_shell: "If (-not(get-netipaddress | where {$_.IPAddress -eq '192.168.38.103'})) {$adapter = (get-netadapter | where {$_.MacAddress -eq '00-50-56-A1-B4-C4'}).Name; New-NetIPAddress –InterfaceAlias $adapter –AddressFamily IPv4 -IPAddress 192.168.38.103 –PrefixLength 24 -DefaultGateway 192.168.38.1 } Else { Write-Host 'IP Address Already Created.' }"

# This needs to be made idempodent
#- name: Set HostOnly DNS Address
#  win_shell: "$adapter = (get-netadapter | where {$_.MacAddress -eq '00-50-56-A1-B4-C4'}).Name; Set-DnsClientServerAddress -InterfaceAlias $adapter -ServerAddresses 192.168.38.102,8.8.8.8"

- name: Install git
  win_chocolatey:
    name: git
    state: present

- name: Check if existing DetectionLab directory
  win_stat:
    path: 'c:\DetectionLab'
  register: dir

- name: Git clone Detectionlab
  win_shell: git clone https://github.com/clong/DetectionLab.git
  args:
    chdir: 'c:\'
  when: not dir.stat.exists

- name: Check if existing Vagrant directory
  win_stat:
    path: 'c:\vagrant'
  register: vag

- name: Copy scripts to c:\vagrant
  win_shell: Copy-Item -Recurse c:\DetectionLab\Vagrant c:\vagrant
  when: not vag.stat.exists


#changes to make larger personal domian
- name: fixing hardcoded IPs for personal domain ip schema (provision.ps1)
  win_shell: (Get-Content "c:\vagrant\scripts\provision.ps1").replace('192.168.56.102','10.0.2.2') | Set-Content -Path "c:\vagrant\scripts\provision.ps1"
  when: not vag.stat.exists
- name: fixing hardcoded IPs for personal domain ip schema (join-domain.ps1)
  win_shell: (Get-Content "c:\vagrant\scripts\join-domain.ps1").replace('192.168.56.102','10.0.2.2') | Set-Content -Path "c:\vagrant\scripts\join-domain.ps1"
  when: not vag.stat.exists
- name: fixing hardcoded IPs for personal domain ip schema (join-domain.ps1)
  win_shell: (Get-Content "c:\vagrant\scripts\join-domain.ps1").replace('192.168.56.','10.0.2.2') | Set-Content -Path "c:\vagrant\scripts\join-domain.ps1"
  when: not vag.stat.exists
- name: changing win10 to win10-* for more boxes (join-domain.ps1)
  win_shell: (Get-Content "c:\vagrant\scripts\join-domain.ps1").replace('-eq "win10"','-contains "win10"') | Set-Content -Path "c:\vagrant\scripts\join-domain.ps1"
  when: not vag.stat.exists
- name: changing win10 to win10-* for more boxes (join-domain.ps1)
  win_shell: (Get-Content "c:\vagrant\scripts\join-domain.ps1").replace('-ne "win10"','-contains "win10"') | Set-Content -Path "c:\vagrant\scripts\join-domain.ps1"
  when: not vag.stat.exists
- name: changing windomain.local to windomain to join domain correctly (join-domain.ps1)
  win_shell: (Get-Content "c:\vagrant\scripts\join-domain.ps1").replace('windomain.local','windomain') | Set-Content -Path "c:\vagrant\scripts\join-domain.ps1"
  when: not vag.stat.exists

- name: Join the Domain
  win_shell: .\\provision.ps1
  args:
    chdir: 'c:\vagrant\scripts'
  register: wef_join_domain
  changed_when: "'HasSucceeded : True' in wef_join_domain.stdout"

- debug: msg="{{ wef_join_domain.stdout_lines }}"

- name: Reboot After Joining the Domain
  win_reboot:
    msg: "Joining the domain. Rebooting..."
    pre_reboot_delay: 15
    reboot_timeout: 600
    post_reboot_delay: 60

- name: Download Microsoft ATA
  win_get_url:
    url: http://download.microsoft.com/download/4/9/1/491394D1-3F28-4261-ABC6-C836A301290E/ATA1.9.iso
    dest: "C:\\Users\\vagrant\\AppData\\Local\\Temp\\Microsoft ATA 1.9.iso"
    timeout: 3600

- name: Clear Event Logs
  win_shell: "wevtutil el | Select-String -notmatch \"Microsoft-Windows-LiveId\" | Foreach-Object {wevtutil cl \"$_\"}"

- name: Downloading the Palantir WEF Configuration
  win_shell: ".\\download_palantir_wef.ps1"
  args:
    chdir: 'c:\vagrant\scripts'
  register: palantir_wef
  failed_when: "'Exception' in palantir_wef.stdout"

- debug: msg="{{ palantir_wef.stdout_lines }}"

- name: Installing WEF Subscriptions
  win_shell: ".\\install-wefsubscriptions.ps1"
  args:
    chdir: 'c:\vagrant\scripts'
  register: wef_subscriptions
  failed_when: "'Exception' in wef_subscriptions.stdout"

- debug: msg="{{ wef_subscriptions.stdout_lines }}"

- name: Installing the Splunk Universal Forwarder
  win_shell: ".\\install-splunkuf.ps1"
  args:
    chdir: 'c:\vagrant\scripts'
  register: splunkuf
  failed_when: "'Exception' in splunkuf.stdout"

- debug: msg="{{ splunkuf.stdout_lines }}"

- name: Install Splunk Windows TA
  win_shell: ".\\install-windows_ta.ps1"
  args:
    chdir: 'c:\vagrant\scripts'
  register: windowsta
  failed_when: "'Exception' in windowsta.stdout"

- debug: msg="{{ windowsta.stdout_lines }}"

- name: Installing the Powershell Log Transcription Share
  win_shell: ".\\configure-pslogstranscriptsshare.ps1"
  args:
    chdir: 'c:\vagrant\scripts'
  register: pstranscriptshare
  failed_when: "'Exception' in pstranscriptshare.stdout"

- debug: msg="{{ pstranscriptshare.stdout_lines }}"

- name: Installing the EVTX Event Samples
  win_shell: ".\\install-evtx-attack-samples.ps1"
  args:
    chdir: 'c:\vagrant\scripts'
  register: evtxeventsamples
  failed_when: "'Exception' in evtxeventsamples.stdout"

- debug: msg="{{ evtxeventsamples.stdout_lines }}"

- name: Installing Microsoft Advanced Threat Analytics
  win_shell: ".\\install-microsoft-ata.ps1"
  args:
    chdir: 'c:\vagrant\scripts'
  register: windowsata
  failed_when: "'Exception' in windowsata.stdout"

- debug: msg="{{ windowsata.stdout_lines }}"

- name: Configure WEF with raw Commands
  win_shell: "{{ item }}"
  with_items:
    - "wevtutil el | Select-String -notmatch \"Microsoft-Windows-LiveId\" | Foreach-Object {wevtutil cl \"$_\"}"
    - "Set-SmbServerConfiguration -AuditSmb1Access $true -Force"


